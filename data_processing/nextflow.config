/* main configuration for (sc)RPF analysis
 * includes profiles, barcodes for CS1 and CS2 data types
 * 
 * Michael VanInsberghe
 */


params {
  // Workflow flags
  reads = "fastq/*_R{1,2}_001.fastq.gz"
  outdir = 'RPF_update'
  bulk = false
  parseAllReads = false
  ranger_model = false

  // Trimming flags
  threeadapter = 'TGGAATTCTCGGGT'
  minlength = '15'

  // Reference flags
  genomeDir = false
  genomeFasta = false
  annotations = false
  starOverhang = '50' 
  
  // cluster maximums
  max_memory = 500.GB
  max_cpus = 48
  max_time = 60.h

}


// load base config for all pipelines
includeConfig "conf/base.config"

// default configuration for scRibo
includeConfig "conf/scRibo.config"

profiles{
  cs2 { includeConfig "conf/CS2.config" }
  cs1 { includeConfig "conf/CS1.config" }
  bulk { includeConfig "conf/bulk.config" }
  test { includeConfig "conf/test.config" }
  // conda { process.conda = "$baseDir/environment.yml" }
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
  PYTHONNOUSERSITE = 1
  R_PROFILE_USER = "/.Rprofile"
  R_ENVIRON_USER = "/.Renviron"
}

executor {
  name = 'slurm'
  queueSize = 2000
  queue = 'cpu'
}


// Increase time available to build conda environment
conda { createTimeout = "60 min" }

process.conda = "$baseDir/environment.yml"

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}

def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
        return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
        return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
        return obj
    }
  }
}
